import { useState } from "react";
import { usePostCategory } from "../../hooks/useCategories";

function PostCategory() {
  const [categoryName, setCategoryName] = useState("");
  const [errorName, setErrorName] = useState("");
  const createCategory = usePostCategory();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!categoryName.trim()) return;
    try {
      await createCategory.mutateAsync({
        categoryName: categoryName.trim(),
      });
      setCategoryName("");
      console.log("Category created successfully!");
    } catch (error) {
      console.error("Failed to create category: ", error);
    }
  };

  const handleInputChange = (e) => {
    setCategoryName(e.target.value);
    if (e.target.value === "") {
      setErrorName("");
    } else if (e.target.value.length < 2) {
      setErrorName("⚠️ Name must be at least 2 characters");
    } else if (e.target.value.length > 100) {
      setErrorName("⚠️ Name cannot exceed 100 characters");
    } else {
      setErrorName("");
    }
  };

  return (
    <div className="category">
      <h1>➕ Create Category</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          disabled
          placeholder="Category ID will be auto-generated by the system..."
        />
        <input
          type="text"
          name="categoryName"
          minLength={2}
          maxLength={100}
          value={categoryName}
          onChange={handleInputChange}
          placeholder="Enter Category Name (eg. Milk)"
        />
        {errorName && <div className="error-details">{errorName}</div>}
        <button
          type="submit"
          disabled={createCategory.isPending || !categoryName.trim()}
        >
          {createCategory.isPending ? "Creating..." : "Create Category"}
        </button>
      </form>

      {createCategory.isSuccess && (
        <div className="category-details">
          <strong>✅ Category created successfully!</strong>
          {createCategory.data && (
            <table>
              <thead>
                <tr>
                  <th>Category Name</th>
                  <th>ID</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>
                    <strong>{createCategory.data.categoryName}</strong>
                  </td>
                  <td>{createCategory.data.categoryID}</td>
                </tr>
              </tbody>
            </table>
          )}
        </div>
      )}

      {createCategory.isError && (
        <div className="category-error">
          <p>
            Error in creating category :{" "}
            {typeof createCategory.error?.response?.data === "string"
              ? createCategory.error.response.data
              : createCategory.error?.response?.data?.message ||
                createCategory.error?.message}
          </p>
        </div>
      )}
    </div>
  );
}

export default PostCategory;
